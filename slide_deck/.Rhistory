vector<-rep(1,12)
print(vector)
vector<-rep(1,NA)
vector<-rep(NA,12)
print(vector)
?rnorm
vector<-rnorm(mean=0,sd=1,n=12)
print(vector)
a="Hellow"
b=1:5815
c=list(a,b)
c
vector=seq(0,3,by=0.02)
length(vector)
obj1<-"Hello"
obj2<-"Bristol"
obj3<-paste(obj1,obj2,"!",sep=" ")
print(obj3)
?tail
B<-matrix(c(3,11,5,2),ncol=2)
C<-B[1:2,1]
print(C)
assign_to_z <- function(x) {
z<-x
}
z=5
Hansfunction(3)
assign_to_z <- function(x) {
z<-x
}
z=5
assign_to_z(3)
print(z)
assign_to_z <- function(x) {
z<<-x
}
z=5
assign_to_z(3)
print(z)
?optim
ls()
?ls
a<-mutate(a,testaverage=(test_year_1+test_year_2+test_year_3)/3)
library(tidyverse)
a<-read_csv("example_data1.csv")
a<-mutate(a,testaverage=(test_year_1+test_year_2+test_year_3)/3)
View(a)
a<-filter(a,school_id==5|school_id==14)
View(a)
a<-group_by(a,female,summercamp)
b<-summarise(mean=mean(testaverage))
a<-read_csv("example_data1.csv")
a<-mutate(a,testaverage=(test_year_1+test_year_2+test_year_3)/3)
a<-filter(a,school_id==5|school_id==14)
a<-group_by(a,female,summercamp)
b<-summarise(mean=mean(testaverage))
b<-summarise(a,mean=mean(testaverage))
print(b)
myfunction<-function(name){
print(paste("Hello", name))
}
myfunction("Hans")
a()
a
value1<-24
value2<-314
value3<-value1*value2
print(value3)
vector1<-seq(54:1414,by=0.25)
print(vector1)
vector1<-seq(54,1414,by=0.25)
print(vector1)
obj1<-"Hello"
obj2<-"Hans"
obj3<-c(obj1,obj2,sep=" ")
print(obj3)
vector1<-rep(1,25)
print(vector1)
# Exercise 1: Install tidyverse
install.packages("tidyverse")
# Exercise 2: Load tidyverse
library("tidyverse")
# Exercise 3: Load the dataset "example_data1.csv" and save it under a name
#             of your choice.
mydata<-read_csv("https://github.com/hhsievertsen/R_introduction/raw/master/datasets/example_data1.csv")
# Exercise 3: Load the dataset "example_data1.csv" and save it under a name
#             of your choice.
mydata<-read_csv("https://raw.githubusercontent.com/hhsievertsen/Advanced_R/master/datasets/example_data1.csv")
# Exercise 4: Create a new variable in the new dataset that is defined as the
#             average of the variables test_year_1, test_year_3 and test_year_5.
#             Save the modified dataset.
mydata<-mutate(mydata,testscoreaverage=(test_year_1+test_year_3+test_year_5)/3)
# Exercise 5: Use the dataset created in exercise 4 and keep only the observations
#             from school 4 and 15 (based on the school_id variable).
#             Save the modified dataset.
mydata<-filter(mydata,school_id==4|school_id==15)
# Exercise 6: Use the dataset created in exercise 5 and group the dataset on the variables
#             summercamp and female. Calculate the average of the test score variable created
#             in exercise 4 by summercamp participation and gender using the summarise() function.
#             Save the results in a new object and print them in the console.
#             The printed result should be as follows:
mydata<-group_by(mydata,summercamp,female)
mydata<-summarise(mydata,mean=mean(testscoreaverage))
print(mydata)
# Exercise 7: Repeat exercise 1-5 again, but use the %>% operator to do all this in one step.
mydata<-read_csv("https://raw.githubusercontent.com/hhsievertsen/Advanced_R/master/datasets/example_data1.csv")%>%
mutate(testscoreaverage=(test_year_1+test_year_3+test_year_5)/3)%>%
filter(school_id==4|school_id==15)%>%
group_by(summercamp,female)%>%
summarise(mean=mean(testscoreaverage))
print(mydata)
tidydata<-read_csv("https://raw.githubusercontent.com/hhsievertsen/Advanced_R/master/datasets/example_data1.csv")%>%
pivot_longer(names_to="test_year",values_to = "score",cols =7:15 )%>%
mutate(test_year=as.numeric(substr(test_year,11,11)))
collapsed_data<-tidydata%>%
group_by(summercamp,test_year)%>%
summarise(score=mean(score))%>%
mutate(camp=ifelse(summercamp==0,"Attended summer camp", "Did not attend"))
ggplot(collapsed_data,aes(x=test_year,y=score,colour=camp))+
geom_line()+
labs(x="Test Year", y="Test score", colour=" ")+
theme_classic()+
theme(legend.position = "top")
# solutions for "Introduction to R" part "3. Working with matrices in R".
# by Hans Henrik Sievertsen (h.h.sievertsen@bristol.ac.uk), Feb 3, 2021.
# Objective: getting used to working with matrices in R.
# Exercise 1: Create a matrix with 3 rows and 3 columns, where each cell value is a draw from
#             a random normal distribution. Save as object A and print A in the console.
A<-matrix(rnorm(n=9),nrow=3)
print(A)
# Exercise 2: Create a matrix with 3 rows and 3 columns, where each cell value is a draw from
#             a random normal distribution. Save the matrix as object B and multiply A with B
#             (using matrix multiplication, not element wise multiplication).
#             Save the resulting matrix as C and print C in the console.
B<-matrix(rnorm(n=9),nrow=3)
C<-A%*%B
# Exercise 3: Compute the determinant of C.
#             Is C  singular?
det(C)
# Exercise 4: Compute the inverse of C and verify that the inverse of C times C
#             gives the identity matrix.
Cinverse<-solve(C)
C%*%Cinverse
# Exercise 5: load the dataset "example_data1.csv" and estimate the following model:
#             test_year_2=alpha0+alpha1*parental_schooling+alpha2*parental_lincome+e
#             using OLS with the lm() function. Print the results in the console.
mydata<-read_csv("https://raw.githubusercontent.com/hhsievertsen/Advanced_R/master/datasets/example_data1.csv")
lmfit<-lm(test_year_2~parental_schooling+parental_lincome,data=mydata)
summary(lmfit)
# Exercise 6: Estimate the same model as in Exercise 5, but this time you do it manually using
#             matrix algebra. Compare the results to the results from exercise 5.
y<-mydata%>%select(test_year_2)%>%as.matrix()
X<-mydata%>%select(parental_schooling,parental_lincome)%>%mutate(constant=1)%>%as.matrix()
betahat<-solve(t(X)%*%X)%*%t(X)%*%y
betahat
# Exercise 7: Compute the residuals from the regression and create a q-q plot.
residuals<-y-X%*%betahat
qqnorm(residuals)
# exercises for "Introduction to R" part "4. Functions, control structures and loops in R".
# by Hans Henrik Sievertsen (h.h.sievertsen@bristol.ac.uk), Feb 3, 2021.
# Objective: getting used to working with matrices in R.
# Exercise 1: Create a function that takes one argument called name. The function should
#             print "Hello X" where X is the name provided by the user. In other words, it
#             should work as follows:
#
#             myfunction("Hans")
#              [1] "Hello Hans"
myfunction<-function(name){
output<-paste("Hello",name)
print(output)
}
myfunction("Hans")
# Exercise 2: Add control structure in your function and default argument values, such that
#             if the user did not provide a name, the function prints "Hello World" and a
#             warning that default values are used.
myfunction<-function(name="World"){
if (missing(name)){
print("Warning: Argument not provided. Default used.")
}
output<-paste("Hello",name)
print(output)
}
myfunction()
myfunction("Hans")
# Exercise 4: Estimate a probit model of summer camp participation,
#             as  function of parental income, parental schooling and child gender. using
#             glm() function in R.
# Load data
mydata<-read_csv("https://raw.githubusercontent.com/hhsievertsen/Advanced_R/master/datasets/example_data1.csv")
# Estimate the probit model
probitfit<-glm(summercamp~parental_lincome+female+parental_schooling,
family = binomial(link = "probit"), data = mydata)
# Show parameter estimates
summary(probitfit)
# Exercise 5: Write the log likelihood for a probit model of summer camp participation,
#             as  function of parental income, parental schooling and child gender. Insert
#             the parameters obtained in exercise 4 and calculate the log likelihood.
# load data
df<-read_csv("https://raw.githubusercontent.com/hhsievertsen/Advanced_R/master/datasets/example_data1.csv")
# y variable
y<-df%>%select(summercamp)%>%as.matrix()
# x variable
X<-df%>%select(parental_lincome,female,parental_schooling)%>%mutate(constant=1)%>%as.matrix()
# xb (note constant is given last)
xb<-X%*%c(0.35410,0.04908,0.40710 ,-10.57368)
# log likelihood
l<-sum(y*log(pnorm(xb))+(1-y)*log(1-pnorm(xb)))
# return value
l
# Exercise 6: Find the maximum likelihood estimate using the optim() function and compare
#             the estimates to the results from exercise 4.
my_loglikelihood <- function(y,x,beta,data) {
# specify dataset
df<-data
# extract the dependent variable and the covariates
yvar<-df%>%select(y)%>%as.matrix()
Xvar<-df%>%select(x)%>%mutate(constant=1)%>%as.matrix()
# beta
betavec=beta
# xb (note constant is given last)
xb<-Xvar%*%betavec
# log likelihood
l<-sum(yvar*log(pnorm(xb))+(1-yvar)*log(1-pnorm(xb)))
# return (explicitly tell R to return this object)!
return(l)
}
df<-read_csv("https://raw.githubusercontent.com/hhsievertsen/Advanced_R/master/datasets/example_data1.csv")
# use the R function optim to optimize ll
optim(par=c(0,0,0,0), fn=my_loglikelihood, control=list(fnscale = -1),
x=c("parental_lincome","female","parental_schooling"),y="summercamp",data=df)
# Exercise 7: Manually find the optimum using a while loop, but keeping all but one parameter
#             fixed at the parameter values obtained in exercise 6.
# clear workspace
rm(list=ls())
# define function
my_loglikelihood <- function(y,x,beta,data) {
# specify dataset
df<-data
# extract the dependent variable and the covariates
yvar<-df%>%select(y)%>%as.matrix()
Xvar<-df%>%select(x)%>%mutate(constant=1)%>%as.matrix()
# beta
betavec=beta
# xb (note constant is given last)
xb<-Xvar%*%betavec
# log likelihood
l<-sum(yvar*log(pnorm(xb))+(1-yvar)*log(1-pnorm(xb)))
# return (explicitly tell R to return this object)!
return(l)
}
# load data
df<-read_csv("https://raw.githubusercontent.com/hhsievertsen/Advanced_R/master/datasets/example_data1.csv")
# starting values
beta1<-0
llvaluelag<--Inf
# start loop
max_Iter<-10000
steps<-0.001
for (x in 1:max_Iter) {
llvalue<-my_loglikelihood(beta=c(beta1,0.04899958,0.40704329,-10.57364160),x=c("parental_lincome","female","parental_schooling"),y="summercamp",data=df)
beta1<<-beta1+steps # update value
# update ll
change<-(llvalue-llvaluelag)
llvaluelag<-llvalue
# print
print (llvalue)
# stop if change is negative
if (change<0) {
print(paste("The estimate for beta 1 is:",beta1))
break
}
}
